// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;
public class DescreveroObjetoTest {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  @Before
  public void setUp() {
    driver = new ChromeDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  @After
  public void tearDown() {
    driver.quit();
  }
  @Test
  public void descreveroObjeto() {
    // Abrir site
    driver.get("http://10.2.1.110:8080/legislativo-proposta-emenda-loa/2024/EMENDA/new");
    // Verificar botões
    {
      List<WebElement> elements = driver.findElements(By.id("field_objetivo"));
      assert(elements.size() > 0);
    }
    driver.findElement(By.id("field_objetivo")).click();
    assertThat(driver.findElement(By.xpath("//*[@id=\"objetivoHelpBlock\"]/span")).getText(), is("Justifique aqui a proposta de emenda a PLOA."));
    {
      List<WebElement> elements = driver.findElements(By.cssSelector("#objetivoHelpBlock > .stretched-link"));
      assert(elements.size() > 0);
    }
    assertThat(driver.findElement(By.xpath("//*[@id=\"objetivoHelpBlock\"]/span")).getText(), is("Justifique aqui a proposta de emenda a PLOA."));
    // botão (?)
    {
      List<WebElement> elements = driver.findElements(By.cssSelector("#objetivoHelpBlock > .stretched-link"));
      assert(elements.size() > 0);
    }
    driver.findElement(By.cssSelector(".justify-content-center")).click();
    assertThat(driver.findElement(By.cssSelector(".form-text")).getText(), is("O campo é obrigatório."));
    // caixa de texto é digitável?
    {
      WebElement element = driver.findElement(By.id("field_objetivo"));
      Boolean isEditable = element.isEnabled() && element.getAttribute("readonly") == null;
      assertTrue(isEditable);
    }
    driver.findElement(By.id("field_objetivo")).sendKeys("amendoim");
    {
      String value = driver.findElement(By.id("field_objetivo")).getAttribute("value");
      assertThat(value, is("amendoim"));
    }
  }
}
